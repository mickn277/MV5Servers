# --------------------------------------------------------------------------------
# Purpose:
#   Provision Oracle Apex datbase server with ORDS.
# History:
#   20/06/2022 Mick277@yandex.com: Wrote Script.
#   24/06/2022 Mick277@yandex.com: Upgraded to Oracle Linux 8, Oracle XE 21c, Apex 22.1.
#     Added SSD config and HTTPS port forward.
# --------------------------------------------------------------------------------

# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Name in Vagrant & VirtualBox
NAME = "Vagrant-XE21c-Apex22"

# Define tests so it's possible to determine if we are provisioned and or provisioning 
def provisioned?(provider='virtualbox')
    File.exists?(File.join(File.dirname(__FILE__),".vagrant/machines/#{NAME}/#{provider}/action_provision"))
end
def provisioning?()
  (ARGV.include?("reload") && ARGV.include?("--provision")) || ARGV.include?("provision")
end

# Vagrant prerequisites
unless Vagrant.has_plugin?("vagrant-reload")
  puts 'Installing vagrant-reload Plugin...'
  system('vagrant plugin install vagrant-reload')
end
unless Vagrant.has_plugin?("vagrant-proxyconf")
  puts 'Installing vagrant-proxyconf Plugin...'
  system('vagrant plugin install vagrant-proxyconf')
end
unless Vagrant.has_plugin?("vagrant-vbguest")
  puts 'Installing vagrant-proxyconf Plugin...'
  system('vagrant plugin install vagrant-vbguest')
end

# Tests for provisioning prerequisites ...
if (not provisioned?) || provisioning?
  unless !Dir.glob('./downloads/oracle-database-xe-*.rpm').empty?
    puts 'oracle db rpm download not found'
    exit
  end
  unless !Dir.glob('./downloads/apex*.zip').empty?
    puts 'apex zip download not found'
    exit
  end
  unless !Dir.glob('./downloads/ords*.rpm').empty?
    puts 'ords rpm download not found'
    exit
  end
  unless !Dir.glob('./downloads/jdk*x64_bin.rpm').empty?
    puts 'jdk rpm download not found'
    exit
  end
else
  puts 'provisioned and not provisioning, skipping provisioning checks ...'
end

# get host time zone for setting VM time zone, if possible
# can override in env section below
offset_sec = Time.now.gmt_offset
if (offset_sec % (60 * 60)) == 0
  offset_hr = ((offset_sec / 60) / 60)
  timezone_suffix = offset_hr >= 0 ? "-#{offset_hr.to_s}" : "+#{(-offset_hr).to_s}"
  SYSTEM_TIMEZONE = 'Etc/GMT' + timezone_suffix
else
  # if host time zone isn't an integer hour offset, fall back to UTC
  SYSTEM_TIMEZONE = 'UTC'
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "oraclebase/oracle-8"
  config.vm.box_url = "https://yum.oracle.com/boxes/oraclelinux/latest/ol8-latest.box"
  config.vm.define NAME
  config.vm.hostname = "oraapex" # SecFix: hostname different to vm name
  config.vm.boot_timeout = 600 # Default=300, changed for slow system
  config.vm.box_check_update = false
   
  # Must specify :id "ssh" so it's recognised as the vagrant ssh port
  config.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh"

  # Internal network for interserver comms
  config.vm.network "private_network", ip: "192.168.0.2", virtualbox__intnet: true

  # Oracle port forwarding
  config.vm.network "forwarded_port", guest: 1521, host: 1521, id: "oradb"
  config.vm.network "forwarded_port", guest: 5500, host: 5500, id: "emconsole"
  config.vm.network "forwarded_port", guest: 8080, host: 8080, id: "apex_http"
  config.vm.network "forwarded_port", guest: 8443, host: 8443, id: "apex_https"

  # Mick277@yandex.com: Testing showed 3G required for reliable oralce memory_target=2G
  config.vm.provider "virtualbox" do |v|
    v.memory = 3072
    v.cpus = 3  # Default=3, change to 2 for low spec machine.
    v.name = NAME
    # Prevent VirtualBox from interfering with host audio stack
    v.customize ["modifyvm", :id, "--audio", "none"] 
    # Fix VirtualBox errors.  vram was 8MB VBoxVGA
    v.customize ["modifyvm", :id, "--vram", "16"]
    v.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
    # Configure storage for SSD
    v.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', '0', '--nonrotational', 'on']
    v.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', '1', '--nonrotational', 'on']
    # DEBUG: Comment in to enable GUI:
    #v.gui = true
  end

  # Proxy configuration from host env - optional
  if Vagrant.has_plugin?("vagrant-proxyconf")
    puts "getting Proxy Configuration from Host..."
    if ENV["http_proxy"]
      puts "http_proxy found, adding on guest"
      config.proxy.http = ENV["http_proxy"]
    end
    if ENV["https_proxy"]
      puts "https_proxy found, adding on guest"
      config.proxy.https = ENV["https_proxy"]
    end
    if ENV["no_proxy"]
      config.proxy.no_proxy = ENV["no_proxy"]
    end
  end

  # SecFix: After provision, mount purposeful folders, rather than whole vagrant folder

  # backups out
  config.vm.synced_folder "guest-backups/", "/backups"

  # data in/out
  config.vm.synced_folder "guest-data/", "/data"
  
  # scripts in
  config.vm.synced_folder "guest-scripts/", "/scripts"

  # ----------------------------------------
  # Provision (Initial boot only)
  # ----------------------------------------

  # Provision - regional settings, must be before database
  config.vm.provision "shell", path: "provision-scripts/config-region.sh"

  # Provision and update Oracle Linux
  config.vm.provision "shell", path: "provision-scripts/install.sh"
  
  # Provision linux diag and perf utils
  config.vm.provision "shell", path: "provision-scripts/linux-utils.sh"

  # Provision Oracle Database on the first run
  config.vm.provision "shell", path: "provision-scripts/database.sh", env:
	{
	   "ORACLE_CHARACTERSET" => "AL32UTF8",
	   "SYSTEM_TIMEZONE"     => SYSTEM_TIMEZONE
	}

  # Provision Oracle tuning, backups and other configs
  config.vm.provision "shell", path: "provision-scripts/database-xe-tuning-configs.sh"

  # Provision - config user environment:
  config.vm.provision "shell", path: "provision-scripts/config-oracle-env.sh"

  # Provision Oracle Application Expresss on the first run
  config.vm.provision "shell", path: "provision-scripts/apex.sh"
  
  # Provision Oracle Rest Data Services on the first run
  config.vm.provision "shell", path: "provision-scripts/ords.sh"

  # SecFix: Don't map the root of vagrant when provisioned, the path leads to the private keys etc.
  # DEBUG: Comment out to keep /vagrant scripts mounted
  if provisioned?
    config.vm.synced_folder ".", "/vagrant", disabled: true
  end
end
