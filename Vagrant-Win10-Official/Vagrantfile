# --------------------------------------------------------------------------------
# Purpose:
#   Provision Oracle Apex datbase server with ORDS.
# History:
#   20/06/2022 Mick277@yandex.com: Wrote Script.
#   24/06/2022 Mick277@yandex.com: Upgraded to Oracle Linux 8, Oracle XE 21c, Apex 22.1. Added SSD config and HTTPS port forward.
# Troubleshooting:
#   Machine hung on what looks disk related.  Fixed by removing SSD Config for low spec laptop.
#   Tested working fine with all optimisations on AMD 3700x with M.2 flash drive and 32GB ram.
#   Errors from Virtualbox on machine with only two phycal cores, but four threads.  Changed v.cpus = 3 to 2 to fix.
# --------------------------------------------------------------------------------

# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Name in Vagrant & VirtualBox
NAME = "Vagrant-Win10-Official"
HOSTNAME = "MSEDGEWIN10" # Win10-official

# Define tests so it's possible to determine if we are provisioned and or provisioning 
def provisioned?(provider='virtualbox')
    File.exists?(File.join(File.dirname(__FILE__),".vagrant/machines/#{NAME}/#{provider}/action_provision"))
end
def provisioning?()
  (ARGV.include?("reload") && ARGV.include?("--provision")) || ARGV.include?("provision")
end

# Vagrant prerequisites
unless Vagrant.has_plugin?("vagrant-reload")
  puts 'Installing vagrant-reload Plugin...'
  system('vagrant plugin install vagrant-reload')
end
unless Vagrant.has_plugin?("vagrant-proxyconf")
  puts 'Installing vagrant-proxyconf Plugin...'
  system('vagrant plugin install vagrant-proxyconf')
end
unless Vagrant.has_plugin?("vagrant-vbguest")
  puts 'Installing vagrant-proxyconf Plugin...'
  system('vagrant plugin install vagrant-vbguest')
end

# get host time zone for setting VM time zone, if possible
# can override in env section below
offset_sec = Time.now.gmt_offset
if (offset_sec % (60 * 60)) == 0
  offset_hr = ((offset_sec / 60) / 60)
  timezone_suffix = offset_hr >= 0 ? "-#{offset_hr.to_s}" : "+#{(-offset_hr).to_s}"
  SYSTEM_TIMEZONE = 'Etc/GMT' + timezone_suffix
else
  # if host time zone isn't an integer hour offset, fall back to UTC
  SYSTEM_TIMEZONE = 'UTC'
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Configuring
  config.vm.box = "Win10-official"
  config.vm.define NAME
  config.vm.hostname = HOSTNAME # SecFix: hostname different to vm name
  config.vm.guest = :windows
  config.vm.communicator = "winrm" # ENV['communicator'] || "winrm"
  config.winrm.username = "IEUser"
  config.winrm.password = "Passw0rd!"
  config.vm.boot_timeout = 800 # Default=300
  config.vm.graceful_halt_timeout = 600
  config.vm.box_check_update = false

  # Internal network for interserver comms
  # Bug: Comment this out as it causes provisioning to fail, WinRM fails as new networks default to public.
  
  #config.vm.network "private_network", ip: "192.168.0.9", virtualbox__intnet: true

  # Create a forwarded port mapping which allows access to a specific ports
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network :forwarded_port, guest: 22, host: 2229, id: "ssh"
  config.vm.network :forwarded_port, guest: 3389, host: 3329, id: "rdp"
  config.vm.network :forwarded_port, guest: 5985, host: 5829, id: "winrm", auto_correct: true
  config.vm.network :forwarded_port, guest: 5986, host: 5929, id: "winrm-ssl"

  # Mick277@yandex.com: Testing showed 3G required for reliable oralce memory_target=2G
  config.vm.provider "virtualbox" do |v|
    v.memory = 4096 # Min recommended 4096
    v.cpus = 2 # Min recommended 2
    v.name = NAME
    # Prevent VirtualBox from interfering with host audio
    v.customize ["modifyvm", :id, "--audio", "none"] 
    # 48MB vram, VBoxSVGA Minimum recommended for Win 10
    v.customize ["modifyvm", :id, "--vram", "48"]
    v.customize ["modifyvm", :id, "--graphicscontroller", "VBoxSVGA"]
    v.customize ['setextradata', :id, 'GUI/ScaleFactor', '1.00']
    v.customize ['modifyvm', :id, '--clipboard', 'bidirectional']   
    # Configure storage for SSD.  BugFix: This causes VM to hang on low spec Asus X53E Laptop
    #v.customize ['storageattach', :id, '--storagectl', 'IDE Controller', '--port', '0', '--nonrotational', 'on']
    # DEBUG: Comment in to enable GUI:
    #v.gui = true
  end
  
  # Enable-PSRemoting -Force

# Enabling RDP & WINRM:
# config.vm.provision "shell",
#   binary: true,
#   privileged: false,
#   inline: <<-SHELL
#   # Enable RDP for IEUser
# 	reg add "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
#   netsh advfirewall firewall set rule group="remote desktop" new enable=yes
#   net localgroup "remote desktop users" IEUser /add
# SHELL

  # winrm - Switch to private network
  # config.vm.provision "shell",
  #   binary: true,
  #   privileged: false,
  #   inline: <<-SHELL
  #   /cygdrive/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -InputFormat None -NoProfile -ExecutionPolicy Bypass -Command '$networkListManager = [Activator]::CreateInstance([Type]::GetTypeFromCLSID([Guid]"{DCB00C01-570F-4A9B-8D69-199FDBA5723B}")) ; $connections = $networkListManager.GetNetworkConnections() ; $connections | % {$_.GetNetwork().SetCategory(1)}'
	# 	sc config winrm start= auto
	# 	cmd /C "winrm quickconfig -q"
	# 	exit
  # SHELL
end