# --------------------------------------------------------------------------------
# 
# --------------------------------------------------------------------------------

# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# define hostname
NAME = "Vagrant-Docker-CentOS7"

#Define tests to determine if we are provisioned and or provisioning 
def provisioned?(provider='virtualbox')
  File.exists?(File.join(File.dirname(__FILE__),".vagrant/machines/#{NAME}/#{provider}/action_provision"))
end
def provisioning?()
  (ARGV.include?("reload") && ARGV.include?("--provision")) || ARGV.include?("provision")
end

# TODO: any custom provisioning tests here

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.define NAME
  config.vm.box = "centos/7"
  config.vm.hostname = NAME # VM hostname
  config.vm.network :forwarded_port, guest: 22, host: 2223, id: "ssh"

  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 1
    # BugFix: Name required here also
    v.name = NAME
    # Prevent VirtualBox from interfering with host audio stack
    v.customize ["modifyvm", :id, "--audio", "none"]
    # USB, Serial disabled by default
  end

  # Proxy configuration from host env - optional
  if Vagrant.has_plugin?("vagrant-proxyconf")
    puts "getting Proxy Configuration from Host..."
    if ENV["http_proxy"]
      puts "http_proxy: " + ENV["http_proxy"]
      config.proxy.http     = ENV["http_proxy"]
    end
    if ENV["https_proxy"]
      puts "https_proxy: " + ENV["https_proxy"]
      config.proxy.https    = ENV["https_proxy"]
    end
    if ENV["no_proxy"]
      config.proxy.no_proxy = ENV["no_proxy"]
    end
  end

  # SecFix: Don't map the root of vagrant when provisioned, the path leads to the private keys etc.
  if provisioned?
    config.vm.synced_folder ".", "/vagrant", disabled: true
  end
  config.vm.synced_folder "docker-configs/", "/mnt/docker-configs"

  # Provision
  config.vm.provision :shell, path: "provision-scripts/install-docker.sh"
  config.vm.provision :shell, path: "provision-scripts/enable-user-namespaces.sh"
end
